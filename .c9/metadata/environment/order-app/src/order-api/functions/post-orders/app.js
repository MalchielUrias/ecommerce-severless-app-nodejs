{"filter":false,"title":"app.js","tooltip":"/order-app/src/order-api/functions/post-orders/app.js","undoManager":{"mark":11,"position":11,"stack":[[{"start":{"row":0,"column":0},"end":{"row":59,"column":0},"action":"insert","lines":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.","// SPDX-License-Identifier: MIT-0","","const dynamodb = require('aws-sdk/clients/dynamodb');","const docClient = new dynamodb.DocumentClient();","const uuid = require('node-uuid');","","const tableName = process.env.ORDER_TABLE;","const DEFAULT_ORDER_STATUS = \"PENDING\" // Default Order Status will be written to DynamoDB","","// The function returns current date","const getCurrentDate = () => {","    let date_ob = new Date();","    let date = (\"0\" + date_ob.getDate()).slice(-2);","    let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);","    let year = date_ob.getFullYear();","    let hours = date_ob.getHours();","    let minutes = date_ob.getMinutes();","    let seconds = date_ob.getSeconds();","    ","    return year + \"-\" + month + \"-\" + date + \"T\" + hours + \":\" + minutes + \":\" + seconds;","}","","exports.postOrders = async (event) => {","    let formattedDateNow = getCurrentDate();","    const { body } = event;   // It destructures the body payload from event. ","    let parsedBody = JSON.parse(body); // It parses the JSON payload to java script object ","    ","    // The item contains fully order Item. ","    let item = {","        user_id : \"static_user\",   ","        id: uuid.v4(),             ","        name: parsedBody.name, ","        restaurantId: parsedBody.restaurantId, ","        quantity: parsedBody.quantity,","        createdAt: formattedDateNow.toString(),","        orderStatus: DEFAULT_ORDER_STATUS,","    }","    ","    let params = {","        TableName : tableName,","        Item: item","    }; ","","    // We use 'put' operator to put item to Dynamodb.","    try {","        const data = await docClient.put(params).promise()","        console.log(\"Success for putting Item\")","        console.log(data)","    } catch (err) {","        console.log(\"Failure\", err.message)","    }","    const response = {","      statusCode: 200,","      body: JSON.stringify(item)","","    };","    return response;","}",""],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":59,"column":0},"action":"remove","lines":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.","// SPDX-License-Identifier: MIT-0","","const dynamodb = require('aws-sdk/clients/dynamodb');","const docClient = new dynamodb.DocumentClient();","const uuid = require('node-uuid');","","const tableName = process.env.ORDER_TABLE;","const DEFAULT_ORDER_STATUS = \"PENDING\" // Default Order Status will be written to DynamoDB","","// The function returns current date","const getCurrentDate = () => {","    let date_ob = new Date();","    let date = (\"0\" + date_ob.getDate()).slice(-2);","    let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);","    let year = date_ob.getFullYear();","    let hours = date_ob.getHours();","    let minutes = date_ob.getMinutes();","    let seconds = date_ob.getSeconds();","    ","    return year + \"-\" + month + \"-\" + date + \"T\" + hours + \":\" + minutes + \":\" + seconds;","}","","exports.postOrders = async (event) => {","    let formattedDateNow = getCurrentDate();","    const { body } = event;   // It destructures the body payload from event. ","    let parsedBody = JSON.parse(body); // It parses the JSON payload to java script object ","    ","    // The item contains fully order Item. ","    let item = {","        user_id : \"static_user\",   ","        id: uuid.v4(),             ","        name: parsedBody.name, ","        restaurantId: parsedBody.restaurantId, ","        quantity: parsedBody.quantity,","        createdAt: formattedDateNow.toString(),","        orderStatus: DEFAULT_ORDER_STATUS,","    }","    ","    let params = {","        TableName : tableName,","        Item: item","    }; ","","    // We use 'put' operator to put item to Dynamodb.","    try {","        const data = await docClient.put(params).promise()","        console.log(\"Success for putting Item\")","        console.log(data)","    } catch (err) {","        console.log(\"Failure\", err.message)","    }","    const response = {","      statusCode: 200,","      body: JSON.stringify(item)","","    };","    return response;","}",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":73,"column":0},"action":"insert","lines":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.","// SPDX-License-Identifier: MIT-0","","const dynamodb = require(\"aws-sdk/clients/dynamodb\")","const docClient = new dynamodb.DocumentClient()","const uuid = require(\"node-uuid\")","","const tableName = process.env.ORDER_TABLE","const DEFAULT_ORDER_STATUS = \"PENDING\"","","// It gets the current date","const getCurrentDate = () => {","  let date_ob = new Date()","  let date = (\"0\" + date_ob.getDate()).slice(-2)","  let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2)","  let year = date_ob.getFullYear()","  let hours = date_ob.getHours()","  let minutes = date_ob.getMinutes()","  let seconds = date_ob.getSeconds()","","  return (","    year +","    \"-\" +","    month +","    \"-\" +","    date +","    \"T\" +","    hours +","    \":\" +","    minutes +","    \":\" +","    seconds","  )","}","","exports.postOrders = async (event) => {","  let formattedDateNow = getCurrentDate()","","  // We are reading the records from SQS in a loop","  for (const record of event.Records) {","    const { messageId, body } = record // Now destructures the MessageId and Body from event.","    let parsedBody = JSON.parse(body) // Parses the Json to Javascript object","","    // Instead of ussing uuid in Id, now we are passing MessageId to Id parameter in Item payload","    let item = {","      user_id: \"static_user\",","      id: messageId,","      name: parsedBody.data.name,","      restaurantId: parsedBody.data.restaurantId,","      quantity: parsedBody.data.quantity,","      createdAt: formattedDateNow.toString(),","      orderStatus: DEFAULT_ORDER_STATUS,","    }","","    let params = {","      TableName: tableName,","      Item: item,","    }","","    // Use Put method to put items into Dynamodb","    try {","      const data = await docClient.put(params).promise()","      console.log(\"Success for putting Item\")","      console.log(data)","    } catch (err) {","      console.log(\"Failure\", err.message)","    }","  }","  const response = {","    statusCode: 200,","  }","  return response","}",""]}],[{"start":{"row":0,"column":0},"end":{"row":73,"column":0},"action":"remove","lines":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.","// SPDX-License-Identifier: MIT-0","","const dynamodb = require(\"aws-sdk/clients/dynamodb\")","const docClient = new dynamodb.DocumentClient()","const uuid = require(\"node-uuid\")","","const tableName = process.env.ORDER_TABLE","const DEFAULT_ORDER_STATUS = \"PENDING\"","","// It gets the current date","const getCurrentDate = () => {","  let date_ob = new Date()","  let date = (\"0\" + date_ob.getDate()).slice(-2)","  let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2)","  let year = date_ob.getFullYear()","  let hours = date_ob.getHours()","  let minutes = date_ob.getMinutes()","  let seconds = date_ob.getSeconds()","","  return (","    year +","    \"-\" +","    month +","    \"-\" +","    date +","    \"T\" +","    hours +","    \":\" +","    minutes +","    \":\" +","    seconds","  )","}","","exports.postOrders = async (event) => {","  let formattedDateNow = getCurrentDate()","","  // We are reading the records from SQS in a loop","  for (const record of event.Records) {","    const { messageId, body } = record // Now destructures the MessageId and Body from event.","    let parsedBody = JSON.parse(body) // Parses the Json to Javascript object","","    // Instead of ussing uuid in Id, now we are passing MessageId to Id parameter in Item payload","    let item = {","      user_id: \"static_user\",","      id: messageId,","      name: parsedBody.data.name,","      restaurantId: parsedBody.data.restaurantId,","      quantity: parsedBody.data.quantity,","      createdAt: formattedDateNow.toString(),","      orderStatus: DEFAULT_ORDER_STATUS,","    }","","    let params = {","      TableName: tableName,","      Item: item,","    }","","    // Use Put method to put items into Dynamodb","    try {","      const data = await docClient.put(params).promise()","      console.log(\"Success for putting Item\")","      console.log(data)","    } catch (err) {","      console.log(\"Failure\", err.message)","    }","  }","  const response = {","    statusCode: 200,","  }","  return response","}",""],"id":3},{"start":{"row":0,"column":0},"end":{"row":63,"column":0},"action":"insert","lines":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.","// SPDX-License-Identifier: MIT-0","","// Instead of using DynamoDB client, we will be using Stepfunctions client","const stepfunctions = require('@aws-sdk/client-sfn');","const stepfunctionsClient = new stepfunctions.SFN();","const DEFAULT_ORDER_STATUS = \"PENDING\"","","// Now, are getting State Machine Arn from environment variable","const stateMachineArn = process.env.STATE_MACHINE_ARN;","","// Gets the current date","const getCurrentDate = () => {","    let date_ob = new Date();","    let date = (\"0\" + date_ob.getDate()).slice(-2);","    let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);","    let year = date_ob.getFullYear();","    let hours = date_ob.getHours();","    let minutes = date_ob.getMinutes();","    let seconds = date_ob.getSeconds();","    ","    return year + \"-\" + month + \"-\" + date + \"T\" + hours + \":\" + minutes + \":\" + seconds;","}","","exports.postOrders = async (event) => {","  let formattedDateNow = getCurrentDate();","  ","  for(const record of event.Records){","    const {messageId, body} = record;","    let parsedBody = JSON.parse(body);    ","    ","    let item = {","      user_id : \"static_user\", ","      id: messageId, ","      name: parsedBody.data.name, ","      restaurantId: parsedBody.data.restaurantId, ","      createdAt: formattedDateNow.toString(),","      quantity: parsedBody.data.quantity,","      orderStatus: DEFAULT_ORDER_STATUS,","    }","    ","    // We will be creating step functions object from input and stateMachine arn.","    const startReq = {","      stateMachineArn: stateMachineArn,","      input: JSON.stringify(item),","      name: messageId","     }","    ","    // It calls the startExecution method of step functions client with input","    try {","      console.log('starting a SFN execution', { stateMachineArn: stateMachineArn })","      await stepfunctionsClient.startExecution(startReq);","      console.log('Job Completed')","    } catch (error) {","      console.log(error)","    }","  }","","  const response = {","    statusCode: 200","  };","  return response;","}",""]}],[{"start":{"row":31,"column":4},"end":{"row":39,"column":5},"action":"remove","lines":["let item = {","      user_id : \"static_user\", ","      id: messageId, ","      name: parsedBody.data.name, ","      restaurantId: parsedBody.data.restaurantId, ","      createdAt: formattedDateNow.toString(),","      quantity: parsedBody.data.quantity,","      orderStatus: DEFAULT_ORDER_STATUS,","    }"],"id":4},{"start":{"row":31,"column":4},"end":{"row":39,"column":1},"action":"insert","lines":["let item = {","  user_id: parsedBody.cognito_userid, // Here is the updated part","  id: messageId,","  name: parsedBody.data.name,","  restaurantId: parsedBody.data.restaurantId,","  createdAt: formattedDateNow.toString(),","  quantity: parsedBody.data.quantity,","  orderStatus: DEFAULT_ORDER_STATUS,","}"]}],[{"start":{"row":32,"column":0},"end":{"row":32,"column":2},"action":"insert","lines":["  "],"id":5},{"start":{"row":33,"column":0},"end":{"row":33,"column":2},"action":"insert","lines":["  "]},{"start":{"row":34,"column":0},"end":{"row":34,"column":2},"action":"insert","lines":["  "]},{"start":{"row":35,"column":0},"end":{"row":35,"column":2},"action":"insert","lines":["  "]},{"start":{"row":36,"column":0},"end":{"row":36,"column":2},"action":"insert","lines":["  "]},{"start":{"row":37,"column":0},"end":{"row":37,"column":2},"action":"insert","lines":["  "]},{"start":{"row":38,"column":0},"end":{"row":38,"column":2},"action":"insert","lines":["  "]},{"start":{"row":39,"column":0},"end":{"row":39,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":32,"column":0},"end":{"row":32,"column":2},"action":"insert","lines":["  "],"id":6},{"start":{"row":33,"column":0},"end":{"row":33,"column":2},"action":"insert","lines":["  "]},{"start":{"row":34,"column":0},"end":{"row":34,"column":2},"action":"insert","lines":["  "]},{"start":{"row":35,"column":0},"end":{"row":35,"column":2},"action":"insert","lines":["  "]},{"start":{"row":36,"column":0},"end":{"row":36,"column":2},"action":"insert","lines":["  "]},{"start":{"row":37,"column":0},"end":{"row":37,"column":2},"action":"insert","lines":["  "]},{"start":{"row":38,"column":0},"end":{"row":38,"column":2},"action":"insert","lines":["  "]},{"start":{"row":39,"column":0},"end":{"row":39,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":32,"column":45},"end":{"row":32,"column":69},"action":"remove","lines":["Here is the updated part"],"id":7},{"start":{"row":32,"column":45},"end":{"row":32,"column":46},"action":"insert","lines":["U"]},{"start":{"row":32,"column":46},"end":{"row":32,"column":47},"action":"insert","lines":["s"]},{"start":{"row":32,"column":47},"end":{"row":32,"column":48},"action":"insert","lines":["s"]}],[{"start":{"row":32,"column":47},"end":{"row":32,"column":48},"action":"remove","lines":["s"],"id":8}],[{"start":{"row":32,"column":47},"end":{"row":32,"column":48},"action":"insert","lines":["e"],"id":9},{"start":{"row":32,"column":48},"end":{"row":32,"column":49},"action":"insert","lines":["r"]},{"start":{"row":32,"column":49},"end":{"row":32,"column":50},"action":"insert","lines":["I"]}],[{"start":{"row":32,"column":50},"end":{"row":32,"column":51},"action":"insert","lines":["D"],"id":10}],[{"start":{"row":32,"column":51},"end":{"row":32,"column":52},"action":"insert","lines":[" "],"id":11},{"start":{"row":32,"column":52},"end":{"row":32,"column":53},"action":"insert","lines":["f"]},{"start":{"row":32,"column":53},"end":{"row":32,"column":54},"action":"insert","lines":["r"]},{"start":{"row":32,"column":54},"end":{"row":32,"column":55},"action":"insert","lines":["o"]},{"start":{"row":32,"column":55},"end":{"row":32,"column":56},"action":"insert","lines":["m"]}],[{"start":{"row":32,"column":56},"end":{"row":32,"column":57},"action":"insert","lines":[" "],"id":12},{"start":{"row":32,"column":57},"end":{"row":32,"column":58},"action":"insert","lines":["c"]},{"start":{"row":32,"column":58},"end":{"row":32,"column":59},"action":"insert","lines":["o"]},{"start":{"row":32,"column":59},"end":{"row":32,"column":60},"action":"insert","lines":["g"]},{"start":{"row":32,"column":60},"end":{"row":32,"column":61},"action":"insert","lines":["n"]},{"start":{"row":32,"column":61},"end":{"row":32,"column":62},"action":"insert","lines":["i"]},{"start":{"row":32,"column":62},"end":{"row":32,"column":63},"action":"insert","lines":["t"]},{"start":{"row":32,"column":63},"end":{"row":32,"column":64},"action":"insert","lines":["o"]}]]},"ace":{"folds":[],"scrolltop":351,"scrollleft":0,"selection":{"start":{"row":32,"column":64},"end":{"row":32,"column":64},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":24,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1692461418338,"hash":"09887ff55c73bd4320385c30ecd982c3941c8fba"}